type token =
  | VAR of (string)
  | INT of (int)
  | PLUS
  | MINUS
  | ASTERISK
  | LT
  | SEMICOL
  | ASSIGN
  | LPAREN
  | RPAREN
  | LCBRA
  | RCBRA
  | TRUE
  | FALSE
  | WHILE
  | SKIP
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
  open Syntax
# 25 "parser.ml"
let yytransl_const = [|
  259 (* PLUS *);
  260 (* MINUS *);
  261 (* ASTERISK *);
  262 (* LT *);
  263 (* SEMICOL *);
  264 (* ASSIGN *);
  265 (* LPAREN *);
  266 (* RPAREN *);
  267 (* LCBRA *);
  268 (* RCBRA *);
  269 (* TRUE *);
  270 (* FALSE *);
  271 (* WHILE *);
  272 (* SKIP *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* VAR *);
  258 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
\004\000\004\000\002\000\002\000\002\000\002\000\002\000\002\000\
\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\002\000\003\000\003\000\003\000\001\000\
\001\000\003\000\001\000\003\000\003\000\005\000\003\000\001\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\016\000\000\000\000\000\000\000\011\000\017\000\
\000\000\000\000\000\000\000\000\000\000\001\000\002\000\003\000\
\000\000\000\000\000\000\015\000\008\000\009\000\000\000\000\000\
\013\000\004\000\000\000\000\000\000\000\000\000\000\000\007\000\
\000\000\006\000\000\000\000\000"

let yydgoto = "\002\000\
\008\000\009\000\019\000\024\000"

let yysindex = "\014\000\
\012\255\000\000\000\000\009\255\012\255\015\255\000\000\000\000\
\005\000\028\255\004\255\005\255\012\255\000\000\000\000\000\000\
\023\255\028\255\038\255\000\000\000\000\000\000\033\255\021\255\
\000\000\000\000\030\255\028\255\028\255\028\255\012\255\000\000\
\029\255\000\000\038\255\035\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\034\255\003\000"

let yygindex = "\000\000\
\000\000\251\255\248\255\000\000"

let yytablesize = 271
let yytable = "\011\000\
\005\000\012\000\014\000\023\000\014\000\015\000\016\000\025\000\
\017\000\027\000\013\000\003\000\004\000\018\000\001\000\020\000\
\010\000\021\000\022\000\033\000\034\000\035\000\005\000\012\000\
\026\000\036\000\006\000\007\000\015\000\016\000\031\000\017\000\
\028\000\029\000\029\000\028\000\018\000\029\000\030\000\032\000\
\028\000\013\000\029\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\000\000\000\000\005\000\005\000\
\012\000\000\000\005\000\013\000\005\000\012\000\014\000"

let yycheck = "\005\000\
\000\000\000\000\000\000\012\000\000\000\001\001\002\001\013\000\
\004\001\018\000\007\001\000\001\001\001\009\001\001\000\012\001\
\008\001\013\001\014\001\028\000\029\000\030\000\011\001\009\001\
\002\001\031\000\015\001\016\001\001\001\002\001\010\001\004\001\
\003\001\005\001\005\001\003\001\009\001\005\001\006\001\010\001\
\003\001\007\001\005\001\010\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\255\255\255\255\006\001\007\001\
\007\001\255\255\010\001\007\001\012\001\012\001\012\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  ASTERISK\000\
  LT\000\
  SEMICOL\000\
  ASSIGN\000\
  LPAREN\000\
  RPAREN\000\
  LCBRA\000\
  RCBRA\000\
  TRUE\000\
  FALSE\000\
  WHILE\000\
  SKIP\000\
  EOF\000\
  "

let yynames_block = "\
  VAR\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'command) in
    Obj.repr(
# 50 "parser.mly"
    ( _1 )
# 189 "parser.ml"
               : Syntax.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
    ( Var _1 )
# 196 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 59 "parser.mly"
    ( IntLit _1 )
# 203 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 63 "parser.mly"
    ( IntLit (- _2) )
# 210 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'a_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'a_exp) in
    Obj.repr(
# 67 "parser.mly"
    ( Plus (_1, _3) )
# 218 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'a_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'a_exp) in
    Obj.repr(
# 71 "parser.mly"
    ( Times (_1, _3) )
# 226 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'a_exp) in
    Obj.repr(
# 75 "parser.mly"
    ( _2 )
# 233 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
    ( BoolLit true )
# 239 "parser.ml"
               : 'b_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
    ( BoolLit false )
# 245 "parser.ml"
               : 'b_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'a_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'a_exp) in
    Obj.repr(
# 88 "parser.mly"
    ( Lt (_1, _3) )
# 253 "parser.ml"
               : 'b_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
    ( Skip )
# 259 "parser.ml"
               : 'command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'a_exp) in
    Obj.repr(
# 98 "parser.mly"
    ( Assign (_1, _3) )
# 267 "parser.ml"
               : 'command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'command) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'command) in
    Obj.repr(
# 102 "parser.mly"
    ( Seq (_1, _3) )
# 275 "parser.ml"
               : 'command))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'b_exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'command) in
    Obj.repr(
# 106 "parser.mly"
    ( While (_3, _5) )
# 283 "parser.ml"
               : 'command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'command) in
    Obj.repr(
# 109 "parser.mly"
                        ( _2 )
# 290 "parser.ml"
               : 'command))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
    ( 
      let message =
        Printf.sprintf 
          "parse error near characters %d-%d"
          (Parsing.symbol_start ())
	        (Parsing.symbol_end ())
	    in
	    failwith message
	  )
# 304 "parser.ml"
               : 'command))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.command)
